functor TigerLrValsFun(structure Token : TOKEN)
 : sig structure ParserData : PARSER_DATA
       structure Tokens : Tiger_TOKENS
   end
 = 
struct
structure ParserData=
struct
structure Header = 
struct
(*
  Josh Isenstein
  CPSC 421 â€” Assignment 4
  February 18, 2015
*)

structure A = Absyn

fun sym(id) = Symbol.symbol(id);


end
structure LrTable = Token.LrTable
structure Token = Token
local open LrTable in 
val table=let val actionRows =
"\
\\001\000\001\000\000\000\000\000\
\\001\000\001\000\214\000\005\000\214\000\007\000\214\000\009\000\214\000\
\\011\000\214\000\013\000\214\000\015\000\043\000\016\000\042\000\
\\017\000\041\000\018\000\040\000\026\000\214\000\027\000\214\000\
\\031\000\214\000\032\000\214\000\035\000\214\000\036\000\214\000\
\\038\000\214\000\039\000\214\000\043\000\214\000\044\000\214\000\
\\045\000\214\000\000\000\
\\001\000\001\000\215\000\005\000\215\000\007\000\215\000\009\000\215\000\
\\011\000\215\000\013\000\215\000\015\000\043\000\016\000\042\000\
\\017\000\041\000\018\000\040\000\026\000\215\000\027\000\215\000\
\\031\000\215\000\032\000\215\000\035\000\215\000\036\000\215\000\
\\038\000\215\000\039\000\215\000\043\000\215\000\044\000\215\000\
\\045\000\215\000\000\000\
\\001\000\001\000\216\000\005\000\216\000\007\000\216\000\009\000\216\000\
\\011\000\216\000\013\000\216\000\015\000\043\000\016\000\042\000\
\\017\000\041\000\018\000\040\000\026\000\216\000\027\000\216\000\
\\031\000\216\000\032\000\216\000\035\000\216\000\036\000\216\000\
\\038\000\216\000\039\000\216\000\043\000\216\000\044\000\216\000\
\\045\000\216\000\000\000\
\\001\000\001\000\217\000\005\000\217\000\007\000\217\000\009\000\217\000\
\\011\000\217\000\013\000\217\000\015\000\043\000\016\000\042\000\
\\017\000\041\000\018\000\040\000\026\000\217\000\027\000\217\000\
\\031\000\217\000\032\000\217\000\035\000\217\000\036\000\217\000\
\\038\000\217\000\039\000\217\000\043\000\217\000\044\000\217\000\
\\045\000\217\000\000\000\
\\001\000\001\000\218\000\005\000\218\000\007\000\218\000\009\000\218\000\
\\011\000\218\000\013\000\218\000\015\000\043\000\016\000\042\000\
\\017\000\041\000\018\000\040\000\026\000\218\000\027\000\218\000\
\\031\000\218\000\032\000\218\000\035\000\218\000\036\000\218\000\
\\038\000\218\000\039\000\218\000\043\000\218\000\044\000\218\000\
\\045\000\218\000\000\000\
\\001\000\001\000\219\000\005\000\219\000\007\000\219\000\009\000\219\000\
\\011\000\219\000\013\000\219\000\015\000\043\000\016\000\042\000\
\\017\000\041\000\018\000\040\000\026\000\219\000\027\000\219\000\
\\031\000\219\000\032\000\219\000\035\000\219\000\036\000\219\000\
\\038\000\219\000\039\000\219\000\043\000\219\000\044\000\219\000\
\\045\000\219\000\000\000\
\\001\000\002\000\028\000\003\000\027\000\004\000\026\000\008\000\025\000\
\\009\000\059\000\016\000\024\000\030\000\023\000\033\000\022\000\
\\034\000\021\000\037\000\020\000\041\000\019\000\042\000\018\000\000\000\
\\001\000\002\000\028\000\003\000\027\000\004\000\026\000\008\000\025\000\
\\009\000\106\000\016\000\024\000\030\000\023\000\033\000\022\000\
\\034\000\021\000\037\000\020\000\041\000\019\000\042\000\018\000\000\000\
\\001\000\002\000\028\000\003\000\027\000\004\000\026\000\008\000\025\000\
\\016\000\024\000\030\000\023\000\033\000\022\000\034\000\021\000\
\\037\000\020\000\039\000\115\000\041\000\019\000\042\000\018\000\000\000\
\\001\000\002\000\028\000\003\000\027\000\004\000\026\000\008\000\025\000\
\\016\000\024\000\030\000\023\000\033\000\022\000\034\000\021\000\
\\037\000\020\000\041\000\019\000\042\000\018\000\000\000\
\\001\000\002\000\053\000\000\000\
\\001\000\002\000\064\000\000\000\
\\001\000\002\000\091\000\000\000\
\\001\000\002\000\092\000\000\000\
\\001\000\002\000\093\000\000\000\
\\001\000\002\000\099\000\000\000\
\\001\000\002\000\102\000\013\000\101\000\000\000\
\\001\000\002\000\134\000\012\000\133\000\029\000\132\000\000\000\
\\001\000\002\000\136\000\000\000\
\\001\000\002\000\141\000\000\000\
\\001\000\002\000\155\000\000\000\
\\001\000\002\000\161\000\000\000\
\\001\000\002\000\164\000\000\000\
\\001\000\002\000\166\000\000\000\
\\001\000\002\000\173\000\000\000\
\\001\000\002\000\174\000\000\000\
\\001\000\002\000\178\000\000\000\
\\001\000\002\000\179\000\000\000\
\\001\000\005\000\125\000\013\000\124\000\000\000\
\\001\000\005\000\129\000\009\000\128\000\000\000\
\\001\000\006\000\118\000\028\000\117\000\000\000\
\\001\000\006\000\150\000\000\000\
\\001\000\006\000\157\000\000\000\
\\001\000\006\000\160\000\019\000\159\000\000\000\
\\001\000\006\000\176\000\000\000\
\\001\000\006\000\177\000\000\000\
\\001\000\007\000\098\000\009\000\097\000\000\000\
\\001\000\007\000\098\000\039\000\130\000\000\000\
\\001\000\008\000\119\000\000\000\
\\001\000\009\000\149\000\000\000\
\\001\000\011\000\107\000\015\000\043\000\016\000\042\000\017\000\041\000\
\\018\000\040\000\019\000\039\000\020\000\038\000\021\000\037\000\
\\022\000\036\000\023\000\035\000\024\000\034\000\026\000\033\000\
\\027\000\032\000\000\000\
\\001\000\011\000\127\000\015\000\043\000\016\000\042\000\017\000\041\000\
\\018\000\040\000\019\000\039\000\020\000\038\000\021\000\037\000\
\\022\000\036\000\023\000\035\000\024\000\034\000\026\000\033\000\
\\027\000\032\000\000\000\
\\001\000\013\000\156\000\000\000\
\\001\000\015\000\043\000\016\000\042\000\017\000\041\000\018\000\040\000\
\\019\000\039\000\020\000\038\000\021\000\037\000\022\000\036\000\
\\023\000\035\000\024\000\034\000\026\000\033\000\027\000\032\000\
\\031\000\096\000\000\000\
\\001\000\015\000\043\000\016\000\042\000\017\000\041\000\018\000\040\000\
\\019\000\039\000\020\000\038\000\021\000\037\000\022\000\036\000\
\\023\000\035\000\024\000\034\000\026\000\033\000\027\000\032\000\
\\035\000\139\000\000\000\
\\001\000\015\000\043\000\016\000\042\000\017\000\041\000\018\000\040\000\
\\019\000\039\000\020\000\038\000\021\000\037\000\022\000\036\000\
\\023\000\035\000\024\000\034\000\026\000\033\000\027\000\032\000\
\\036\000\095\000\000\000\
\\001\000\015\000\043\000\016\000\042\000\017\000\041\000\018\000\040\000\
\\019\000\039\000\020\000\038\000\021\000\037\000\022\000\036\000\
\\023\000\035\000\024\000\034\000\026\000\033\000\027\000\032\000\
\\036\000\162\000\000\000\
\\001\000\019\000\116\000\000\000\
\\001\000\019\000\126\000\000\000\
\\001\000\019\000\153\000\000\000\
\\001\000\019\000\172\000\000\000\
\\001\000\028\000\094\000\000\000\
\\001\000\028\000\148\000\000\000\
\\001\000\038\000\090\000\000\000\
\\001\000\040\000\145\000\000\000\
\\183\000\015\000\043\000\016\000\042\000\017\000\041\000\018\000\040\000\
\\019\000\039\000\020\000\038\000\021\000\037\000\022\000\036\000\
\\023\000\035\000\024\000\034\000\026\000\033\000\027\000\032\000\000\000\
\\184\000\000\000\
\\185\000\000\000\
\\186\000\000\000\
\\187\000\000\000\
\\188\000\000\000\
\\189\000\000\000\
\\190\000\000\000\
\\191\000\000\000\
\\192\000\028\000\031\000\000\000\
\\193\000\000\000\
\\194\000\000\000\
\\195\000\000\000\
\\196\000\000\000\
\\197\000\000\000\
\\198\000\000\000\
\\199\000\000\000\
\\200\000\000\000\
\\201\000\000\000\
\\202\000\000\000\
\\203\000\015\000\043\000\016\000\042\000\017\000\041\000\018\000\040\000\
\\019\000\039\000\020\000\038\000\021\000\037\000\022\000\036\000\
\\023\000\035\000\024\000\034\000\026\000\033\000\027\000\032\000\000\000\
\\204\000\015\000\043\000\016\000\042\000\017\000\041\000\018\000\040\000\
\\019\000\039\000\020\000\038\000\021\000\037\000\022\000\036\000\
\\023\000\035\000\024\000\034\000\026\000\033\000\027\000\032\000\000\000\
\\205\000\000\000\
\\206\000\000\000\
\\207\000\015\000\043\000\016\000\042\000\017\000\041\000\018\000\040\000\
\\019\000\039\000\020\000\038\000\021\000\037\000\022\000\036\000\
\\023\000\035\000\024\000\034\000\026\000\033\000\027\000\032\000\000\000\
\\208\000\015\000\043\000\016\000\042\000\017\000\041\000\018\000\040\000\
\\019\000\039\000\020\000\038\000\021\000\037\000\022\000\036\000\
\\023\000\035\000\024\000\034\000\026\000\033\000\027\000\032\000\000\000\
\\209\000\017\000\041\000\018\000\040\000\000\000\
\\210\000\017\000\041\000\018\000\040\000\000\000\
\\211\000\000\000\
\\212\000\000\000\
\\213\000\000\000\
\\220\000\015\000\043\000\016\000\042\000\017\000\041\000\018\000\040\000\
\\019\000\039\000\020\000\038\000\021\000\037\000\022\000\036\000\
\\023\000\035\000\024\000\034\000\000\000\
\\221\000\015\000\043\000\016\000\042\000\017\000\041\000\018\000\040\000\
\\019\000\039\000\020\000\038\000\021\000\037\000\022\000\036\000\
\\023\000\035\000\024\000\034\000\026\000\033\000\000\000\
\\222\000\015\000\043\000\016\000\042\000\017\000\041\000\018\000\040\000\
\\019\000\039\000\020\000\038\000\021\000\037\000\022\000\036\000\
\\023\000\035\000\024\000\034\000\026\000\033\000\027\000\032\000\000\000\
\\223\000\000\000\
\\224\000\000\000\
\\225\000\015\000\043\000\016\000\042\000\017\000\041\000\018\000\040\000\
\\019\000\039\000\020\000\038\000\021\000\037\000\022\000\036\000\
\\023\000\035\000\024\000\034\000\026\000\033\000\027\000\032\000\000\000\
\\226\000\015\000\043\000\016\000\042\000\017\000\041\000\018\000\040\000\
\\019\000\039\000\020\000\038\000\021\000\037\000\022\000\036\000\
\\023\000\035\000\024\000\034\000\026\000\033\000\027\000\032\000\000\000\
\\227\000\015\000\043\000\016\000\042\000\017\000\041\000\018\000\040\000\
\\019\000\039\000\020\000\038\000\021\000\037\000\022\000\036\000\
\\023\000\035\000\024\000\034\000\026\000\033\000\027\000\032\000\000\000\
\\228\000\000\000\
\\229\000\000\000\
\\230\000\000\000\
\\231\000\043\000\052\000\044\000\051\000\045\000\050\000\000\000\
\\232\000\000\000\
\\233\000\000\000\
\\234\000\043\000\052\000\044\000\051\000\000\000\
\\235\000\000\000\
\\236\000\000\000\
\\237\000\044\000\051\000\045\000\050\000\000\000\
\\238\000\000\000\
\\239\000\000\000\
\\240\000\043\000\052\000\000\000\
\\241\000\015\000\043\000\016\000\042\000\017\000\041\000\018\000\040\000\
\\019\000\039\000\020\000\038\000\021\000\037\000\022\000\036\000\
\\023\000\035\000\024\000\034\000\026\000\033\000\027\000\032\000\000\000\
\\242\000\015\000\043\000\016\000\042\000\017\000\041\000\018\000\040\000\
\\019\000\039\000\020\000\038\000\021\000\037\000\022\000\036\000\
\\023\000\035\000\024\000\034\000\026\000\033\000\027\000\032\000\000\000\
\\243\000\002\000\138\000\000\000\
\\244\000\000\000\
\\245\000\005\000\168\000\000\000\
\\246\000\000\000\
\\247\000\000\000\
\\248\000\000\000\
\\249\000\045\000\050\000\000\000\
\\250\000\000\000\
\\251\000\000\000\
\\252\000\000\000\
\\253\000\000\000\
\\254\000\000\000\
\\255\000\002\000\147\000\000\000\
\\000\001\000\000\
\\001\001\005\000\171\000\000\000\
\\002\001\015\000\043\000\016\000\042\000\017\000\041\000\018\000\040\000\
\\019\000\039\000\020\000\038\000\021\000\037\000\022\000\036\000\
\\023\000\035\000\024\000\034\000\026\000\033\000\027\000\032\000\000\000\
\\003\001\015\000\043\000\016\000\042\000\017\000\041\000\018\000\040\000\
\\019\000\039\000\020\000\038\000\021\000\037\000\022\000\036\000\
\\023\000\035\000\024\000\034\000\026\000\033\000\027\000\032\000\000\000\
\\004\001\015\000\043\000\016\000\042\000\017\000\041\000\018\000\040\000\
\\019\000\039\000\020\000\038\000\021\000\037\000\022\000\036\000\
\\023\000\035\000\024\000\034\000\026\000\033\000\027\000\032\000\000\000\
\\005\001\015\000\043\000\016\000\042\000\017\000\041\000\018\000\040\000\
\\019\000\039\000\020\000\038\000\021\000\037\000\022\000\036\000\
\\023\000\035\000\024\000\034\000\026\000\033\000\027\000\032\000\000\000\
\\006\001\015\000\043\000\016\000\042\000\017\000\041\000\018\000\040\000\
\\019\000\039\000\020\000\038\000\021\000\037\000\022\000\036\000\
\\023\000\035\000\024\000\034\000\026\000\033\000\027\000\032\000\000\000\
\\007\001\015\000\043\000\016\000\042\000\017\000\041\000\018\000\040\000\
\\019\000\039\000\020\000\038\000\021\000\037\000\022\000\036\000\
\\023\000\035\000\024\000\034\000\026\000\033\000\027\000\032\000\
\\032\000\140\000\000\000\
\\008\001\008\000\063\000\010\000\062\000\012\000\061\000\014\000\060\000\000\000\
\\009\001\010\000\030\000\014\000\029\000\000\000\
\\010\001\000\000\
\\011\001\000\000\
\\012\001\000\000\
\\013\001\000\000\
\\014\001\040\000\143\000\000\000\
\\015\001\000\000\
\"
val actionRowNumbers =
"\010\000\068\000\064\000\067\000\
\\071\000\070\000\134\000\133\000\
\\132\000\065\000\063\000\069\000\
\\066\000\062\000\061\000\056\000\
\\072\000\075\000\098\000\011\000\
\\010\000\010\000\010\000\007\000\
\\074\000\073\000\131\000\012\000\
\\010\000\010\000\010\000\010\000\
\\010\000\010\000\010\000\010\000\
\\010\000\010\000\010\000\010\000\
\\010\000\010\000\101\000\116\000\
\\104\000\107\000\098\000\054\000\
\\013\000\014\000\015\000\052\000\
\\046\000\044\000\086\000\037\000\
\\076\000\057\000\016\000\017\000\
\\010\000\008\000\136\000\041\000\
\\128\000\088\000\087\000\005\000\
\\003\000\006\000\004\000\002\000\
\\001\000\085\000\084\000\083\000\
\\082\000\095\000\104\000\098\000\
\\114\000\116\000\097\000\101\000\
\\098\000\105\000\107\000\096\000\
\\009\000\048\000\031\000\039\000\
\\010\000\010\000\010\000\060\000\
\\010\000\135\000\029\000\078\000\
\\049\000\042\000\030\000\092\000\
\\090\000\138\000\100\000\099\000\
\\115\000\103\000\102\000\106\000\
\\038\000\059\000\018\000\010\000\
\\019\000\110\000\045\000\127\000\
\\130\000\077\000\079\000\020\000\
\\010\000\137\000\091\000\010\000\
\\058\000\117\000\055\000\122\000\
\\118\000\125\000\053\000\040\000\
\\032\000\010\000\010\000\050\000\
\\080\000\010\000\093\000\021\000\
\\043\000\033\000\010\000\034\000\
\\022\000\047\000\129\000\010\000\
\\089\000\120\000\119\000\023\000\
\\126\000\010\000\024\000\112\000\
\\010\000\081\000\124\000\108\000\
\\051\000\111\000\025\000\094\000\
\\121\000\026\000\010\000\035\000\
\\036\000\109\000\027\000\028\000\
\\112\000\124\000\113\000\123\000\
\\000\000"
val gotoT =
"\
\\001\000\015\000\002\000\180\000\003\000\014\000\004\000\013\000\
\\005\000\012\000\006\000\011\000\007\000\010\000\008\000\009\000\
\\009\000\008\000\010\000\007\000\011\000\006\000\012\000\005\000\
\\013\000\004\000\014\000\003\000\032\000\002\000\034\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\016\000\047\000\017\000\046\000\018\000\045\000\019\000\044\000\
\\023\000\043\000\024\000\042\000\000\000\
\\000\000\
\\001\000\052\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\006\000\011\000\007\000\010\000\008\000\009\000\009\000\008\000\
\\010\000\007\000\011\000\006\000\012\000\005\000\013\000\004\000\
\\014\000\003\000\032\000\002\000\034\000\001\000\000\000\
\\001\000\053\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\006\000\011\000\007\000\010\000\008\000\009\000\009\000\008\000\
\\010\000\007\000\011\000\006\000\012\000\005\000\013\000\004\000\
\\014\000\003\000\032\000\002\000\034\000\001\000\000\000\
\\001\000\054\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\006\000\011\000\007\000\010\000\008\000\009\000\009\000\008\000\
\\010\000\007\000\011\000\006\000\012\000\005\000\013\000\004\000\
\\014\000\003\000\032\000\002\000\034\000\001\000\000\000\
\\001\000\056\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\006\000\011\000\007\000\010\000\008\000\009\000\009\000\008\000\
\\010\000\007\000\011\000\006\000\012\000\005\000\013\000\004\000\
\\014\000\003\000\031\000\055\000\032\000\002\000\034\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\063\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\006\000\011\000\007\000\010\000\008\000\009\000\009\000\008\000\
\\010\000\007\000\011\000\006\000\012\000\005\000\013\000\004\000\
\\014\000\003\000\032\000\002\000\034\000\001\000\000\000\
\\001\000\064\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\006\000\011\000\007\000\010\000\008\000\009\000\009\000\008\000\
\\010\000\007\000\011\000\006\000\012\000\005\000\013\000\004\000\
\\014\000\003\000\032\000\002\000\034\000\001\000\000\000\
\\001\000\065\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\006\000\011\000\007\000\010\000\008\000\009\000\009\000\008\000\
\\010\000\007\000\011\000\006\000\012\000\005\000\013\000\004\000\
\\014\000\003\000\032\000\002\000\034\000\001\000\000\000\
\\001\000\066\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\006\000\011\000\007\000\010\000\008\000\009\000\009\000\008\000\
\\010\000\007\000\011\000\006\000\012\000\005\000\013\000\004\000\
\\014\000\003\000\032\000\002\000\034\000\001\000\000\000\
\\001\000\067\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\006\000\011\000\007\000\010\000\008\000\009\000\009\000\008\000\
\\010\000\007\000\011\000\006\000\012\000\005\000\013\000\004\000\
\\014\000\003\000\032\000\002\000\034\000\001\000\000\000\
\\001\000\068\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\006\000\011\000\007\000\010\000\008\000\009\000\009\000\008\000\
\\010\000\007\000\011\000\006\000\012\000\005\000\013\000\004\000\
\\014\000\003\000\032\000\002\000\034\000\001\000\000\000\
\\001\000\069\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\006\000\011\000\007\000\010\000\008\000\009\000\009\000\008\000\
\\010\000\007\000\011\000\006\000\012\000\005\000\013\000\004\000\
\\014\000\003\000\032\000\002\000\034\000\001\000\000\000\
\\001\000\070\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\006\000\011\000\007\000\010\000\008\000\009\000\009\000\008\000\
\\010\000\007\000\011\000\006\000\012\000\005\000\013\000\004\000\
\\014\000\003\000\032\000\002\000\034\000\001\000\000\000\
\\001\000\071\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\006\000\011\000\007\000\010\000\008\000\009\000\009\000\008\000\
\\010\000\007\000\011\000\006\000\012\000\005\000\013\000\004\000\
\\014\000\003\000\032\000\002\000\034\000\001\000\000\000\
\\001\000\072\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\006\000\011\000\007\000\010\000\008\000\009\000\009\000\008\000\
\\010\000\007\000\011\000\006\000\012\000\005\000\013\000\004\000\
\\014\000\003\000\032\000\002\000\034\000\001\000\000\000\
\\001\000\073\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\006\000\011\000\007\000\010\000\008\000\009\000\009\000\008\000\
\\010\000\007\000\011\000\006\000\012\000\005\000\013\000\004\000\
\\014\000\003\000\032\000\002\000\034\000\001\000\000\000\
\\001\000\074\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\006\000\011\000\007\000\010\000\008\000\009\000\009\000\008\000\
\\010\000\007\000\011\000\006\000\012\000\005\000\013\000\004\000\
\\014\000\003\000\032\000\002\000\034\000\001\000\000\000\
\\001\000\075\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\006\000\011\000\007\000\010\000\008\000\009\000\009\000\008\000\
\\010\000\007\000\011\000\006\000\012\000\005\000\013\000\004\000\
\\014\000\003\000\032\000\002\000\034\000\001\000\000\000\
\\001\000\076\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\006\000\011\000\007\000\010\000\008\000\009\000\009\000\008\000\
\\010\000\007\000\011\000\006\000\012\000\005\000\013\000\004\000\
\\014\000\003\000\032\000\002\000\034\000\001\000\000\000\
\\017\000\079\000\018\000\045\000\019\000\078\000\026\000\077\000\000\000\
\\023\000\081\000\025\000\080\000\000\000\
\\017\000\084\000\023\000\043\000\024\000\083\000\027\000\082\000\000\000\
\\018\000\086\000\028\000\085\000\000\000\
\\016\000\087\000\017\000\046\000\018\000\045\000\019\000\044\000\
\\023\000\043\000\024\000\042\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\033\000\098\000\000\000\
\\001\000\101\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\006\000\011\000\007\000\010\000\008\000\009\000\009\000\008\000\
\\010\000\007\000\011\000\006\000\012\000\005\000\013\000\004\000\
\\014\000\003\000\032\000\002\000\034\000\001\000\000\000\
\\001\000\103\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\006\000\011\000\007\000\010\000\008\000\009\000\009\000\008\000\
\\010\000\007\000\011\000\006\000\012\000\005\000\013\000\004\000\
\\014\000\003\000\015\000\102\000\032\000\002\000\034\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\017\000\084\000\023\000\043\000\024\000\083\000\027\000\106\000\000\000\
\\016\000\107\000\017\000\046\000\018\000\045\000\019\000\044\000\
\\023\000\043\000\024\000\042\000\000\000\
\\000\000\
\\023\000\081\000\025\000\108\000\000\000\
\\000\000\
\\017\000\079\000\018\000\045\000\019\000\078\000\026\000\109\000\000\000\
\\016\000\110\000\017\000\046\000\018\000\045\000\019\000\044\000\
\\023\000\043\000\024\000\042\000\000\000\
\\000\000\
\\018\000\086\000\028\000\111\000\000\000\
\\000\000\
\\001\000\056\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\006\000\011\000\007\000\010\000\008\000\009\000\009\000\008\000\
\\010\000\007\000\011\000\006\000\012\000\005\000\013\000\004\000\
\\014\000\003\000\031\000\112\000\032\000\002\000\034\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\118\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\006\000\011\000\007\000\010\000\008\000\009\000\009\000\008\000\
\\010\000\007\000\011\000\006\000\012\000\005\000\013\000\004\000\
\\014\000\003\000\032\000\002\000\034\000\001\000\000\000\
\\001\000\119\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\006\000\011\000\007\000\010\000\008\000\009\000\009\000\008\000\
\\010\000\007\000\011\000\006\000\012\000\005\000\013\000\004\000\
\\014\000\003\000\032\000\002\000\034\000\001\000\000\000\
\\001\000\120\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\006\000\011\000\007\000\010\000\008\000\009\000\009\000\008\000\
\\010\000\007\000\011\000\006\000\012\000\005\000\013\000\004\000\
\\014\000\003\000\032\000\002\000\034\000\001\000\000\000\
\\000\000\
\\001\000\121\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\006\000\011\000\007\000\010\000\008\000\009\000\009\000\008\000\
\\010\000\007\000\011\000\006\000\012\000\005\000\013\000\004\000\
\\014\000\003\000\032\000\002\000\034\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\020\000\129\000\000\000\
\\001\000\133\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\006\000\011\000\007\000\010\000\008\000\009\000\009\000\008\000\
\\010\000\007\000\011\000\006\000\012\000\005\000\013\000\004\000\
\\014\000\003\000\032\000\002\000\034\000\001\000\000\000\
\\000\000\
\\029\000\135\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\140\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\006\000\011\000\007\000\010\000\008\000\009\000\009\000\008\000\
\\010\000\007\000\011\000\006\000\012\000\005\000\013\000\004\000\
\\014\000\003\000\032\000\002\000\034\000\001\000\000\000\
\\000\000\
\\000\000\
\\001\000\142\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\006\000\011\000\007\000\010\000\008\000\009\000\009\000\008\000\
\\010\000\007\000\011\000\006\000\012\000\005\000\013\000\004\000\
\\014\000\003\000\032\000\002\000\034\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\021\000\144\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\149\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\006\000\011\000\007\000\010\000\008\000\009\000\009\000\008\000\
\\010\000\007\000\011\000\006\000\012\000\005\000\013\000\004\000\
\\014\000\003\000\032\000\002\000\034\000\001\000\000\000\
\\001\000\150\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\006\000\011\000\007\000\010\000\008\000\009\000\009\000\008\000\
\\010\000\007\000\011\000\006\000\012\000\005\000\013\000\004\000\
\\014\000\003\000\032\000\002\000\034\000\001\000\000\000\
\\000\000\
\\000\000\
\\001\000\152\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\006\000\011\000\007\000\010\000\008\000\009\000\009\000\008\000\
\\010\000\007\000\011\000\006\000\012\000\005\000\013\000\004\000\
\\014\000\003\000\032\000\002\000\034\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\156\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\006\000\011\000\007\000\010\000\008\000\009\000\009\000\008\000\
\\010\000\007\000\011\000\006\000\012\000\005\000\013\000\004\000\
\\014\000\003\000\032\000\002\000\034\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\161\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\006\000\011\000\007\000\010\000\008\000\009\000\009\000\008\000\
\\010\000\007\000\011\000\006\000\012\000\005\000\013\000\004\000\
\\014\000\003\000\032\000\002\000\034\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\163\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\006\000\011\000\007\000\010\000\008\000\009\000\009\000\008\000\
\\010\000\007\000\011\000\006\000\012\000\005\000\013\000\004\000\
\\014\000\003\000\032\000\002\000\034\000\001\000\000\000\
\\000\000\
\\030\000\165\000\000\000\
\\001\000\167\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\006\000\011\000\007\000\010\000\008\000\009\000\009\000\008\000\
\\010\000\007\000\011\000\006\000\012\000\005\000\013\000\004\000\
\\014\000\003\000\032\000\002\000\034\000\001\000\000\000\
\\000\000\
\\022\000\168\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\173\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\006\000\011\000\007\000\010\000\008\000\009\000\009\000\008\000\
\\010\000\007\000\011\000\006\000\012\000\005\000\013\000\004\000\
\\014\000\003\000\032\000\002\000\034\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\030\000\178\000\000\000\
\\022\000\179\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\"
val numstates = 181
val numrules = 89
val s = ref "" and index = ref 0
val string_to_int = fn () => 
let val i = !index
in index := i+2; Char.ord(String.sub(!s,i)) + Char.ord(String.sub(!s,i+1)) * 256
end
val string_to_list = fn s' =>
    let val len = String.size s'
        fun f () =
           if !index < len then string_to_int() :: f()
           else nil
   in index := 0; s := s'; f ()
   end
val string_to_pairlist = fn (conv_key,conv_entry) =>
     let fun f () =
         case string_to_int()
         of 0 => EMPTY
          | n => PAIR(conv_key (n-1),conv_entry (string_to_int()),f())
     in f
     end
val string_to_pairlist_default = fn (conv_key,conv_entry) =>
    let val conv_row = string_to_pairlist(conv_key,conv_entry)
    in fn () =>
       let val default = conv_entry(string_to_int())
           val row = conv_row()
       in (row,default)
       end
   end
val string_to_table = fn (convert_row,s') =>
    let val len = String.size s'
        fun f ()=
           if !index < len then convert_row() :: f()
           else nil
     in (s := s'; index := 0; f ())
     end
local
  val memo = Array.array(numstates+numrules,ERROR)
  val _ =let fun g i=(Array.update(memo,i,REDUCE(i-numstates)); g(i+1))
       fun f i =
            if i=numstates then g i
            else (Array.update(memo,i,SHIFT (STATE i)); f (i+1))
          in f 0 handle General.Subscript => ()
          end
in
val entry_to_action = fn 0 => ACCEPT | 1 => ERROR | j => Array.sub(memo,(j-2))
end
val gotoT=Array.fromList(string_to_table(string_to_pairlist(NT,STATE),gotoT))
val actionRows=string_to_table(string_to_pairlist_default(T,entry_to_action),actionRows)
val actionRowNumbers = string_to_list actionRowNumbers
val actionT = let val actionRowLookUp=
let val a=Array.fromList(actionRows) in fn i=>Array.sub(a,i) end
in Array.fromList(List.map actionRowLookUp actionRowNumbers)
end
in LrTable.mkLrTable {actions=actionT,gotos=gotoT,numRules=numrules,
numStates=numstates,initialState=STATE 0}
end
end
local open Header in
type pos = int
type arg = unit
structure MlyValue = 
struct
datatype svalue = VOID | ntVOID of unit ->  unit
 | STRING of unit ->  (string) | INT of unit ->  (int)
 | ID of unit ->  (string) | forseq of unit ->  (A.exp)
 | recordL of unit ->  (A.efield list) | record of unit ->  (A.exp)
 | exps of unit ->  ( ( A.exp * pos )  list)
 | formals_rest of unit ->  (A.formals list)
 | formals of unit ->  (A.formals list)
 | fundecs_rest of unit ->  (A.fundec list)
 | decs_without_fundecs of unit ->  (A.dec list)
 | decs_without_tydecs of unit ->  (A.dec list)
 | tydecs_rest of unit ->  ({ name:A.symbol,ty:A.ty,pos:pos }  list)
 | tydecs of unit ->  (A.dec)
 | tydec of unit ->  ({ name:A.symbol,ty:A.ty,pos:pos } )
 | tyfields_rest of unit ->  (A.tfield list)
 | tyfields of unit ->  (A.tfield list) | ty of unit ->  (A.ty)
 | fundecs of unit ->  (A.dec) | fundec of unit ->  (A.fundec)
 | vardec of unit ->  (A.dec) | decs of unit ->  (A.dec list)
 | expList of unit ->  (A.exp list) | funcall of unit ->  (A.exp)
 | ifseq of unit ->  (A.exp) | assignseq of unit ->  (A.exp)
 | lvalue_subscript of unit ->  (A.var)
 | lvalue_field of unit ->  (A.var) | lvalue_rest of unit ->  (A.var)
 | lvalue of unit ->  (A.var) | bool of unit ->  (A.exp)
 | whileseq of unit ->  (A.exp) | arrayseq of unit ->  (A.exp)
 | comp of unit ->  (A.exp) | arith of unit ->  (A.exp)
 | program of unit ->  (A.exp) | exp of unit ->  (A.exp)
end
type svalue = MlyValue.svalue
type result = A.exp
end
structure EC=
struct
open LrTable
infix 5 $$
fun x $$ y = y::x
val is_keyword =
fn (T 32) => true | (T 33) => true | (T 34) => true | (T 40) => true
 | (T 36) => true | (T 37) => true | (T 38) => true | (T 42) => true
 | (T 43) => true | (T 44) => true | (T 28) => true | (T 29) => true
 | (T 30) => true | (T 31) => true | (T 35) => true | (T 39) => true
 | (T 41) => true | _ => false
val preferred_change : (term list * term list) list = 
(nil
,nil
 $$ (T 30))::
(nil
,nil
 $$ (T 31))::
(nil
,nil
 $$ (T 7))::
nil
val noShift = 
fn (T 0) => true | _ => false
val showTerminal =
fn (T 0) => "EOF"
  | (T 1) => "ID"
  | (T 2) => "INT"
  | (T 3) => "STRING"
  | (T 4) => "COMMA"
  | (T 5) => "COLON"
  | (T 6) => "SEMICOLON"
  | (T 7) => "LPAREN"
  | (T 8) => "RPAREN"
  | (T 9) => "LBRACK"
  | (T 10) => "RBRACK"
  | (T 11) => "LBRACE"
  | (T 12) => "RBRACE"
  | (T 13) => "DOT"
  | (T 14) => "PLUS"
  | (T 15) => "MINUS"
  | (T 16) => "TIMES"
  | (T 17) => "DIVIDE"
  | (T 18) => "EQ"
  | (T 19) => "NEQ"
  | (T 20) => "LT"
  | (T 21) => "LE"
  | (T 22) => "GT"
  | (T 23) => "GE"
  | (T 24) => "UMINUS"
  | (T 25) => "AND"
  | (T 26) => "OR"
  | (T 27) => "ASSIGN"
  | (T 28) => "ARRAY"
  | (T 29) => "IF"
  | (T 30) => "THEN"
  | (T 31) => "ELSE"
  | (T 32) => "WHILE"
  | (T 33) => "FOR"
  | (T 34) => "TO"
  | (T 35) => "DO"
  | (T 36) => "LET"
  | (T 37) => "IN"
  | (T 38) => "END"
  | (T 39) => "OF"
  | (T 40) => "BREAK"
  | (T 41) => "NIL"
  | (T 42) => "FUNCTION"
  | (T 43) => "VAR"
  | (T 44) => "TYPE"
  | (T 45) => "IFPREC"
  | _ => "bogus-term"
local open Header in
val errtermvalue=
fn (T 1) => MlyValue.ID(fn () => ("bogus")) | 
(T 2) => MlyValue.INT(fn () => (1)) | 
(T 3) => MlyValue.STRING(fn () => ("")) | 
_ => MlyValue.VOID
end
val terms : term list = nil
 $$ (T 45) $$ (T 44) $$ (T 43) $$ (T 42) $$ (T 41) $$ (T 40) $$ (T 39)
 $$ (T 38) $$ (T 37) $$ (T 36) $$ (T 35) $$ (T 34) $$ (T 33) $$ (T 32)
 $$ (T 31) $$ (T 30) $$ (T 29) $$ (T 28) $$ (T 27) $$ (T 26) $$ (T 25)
 $$ (T 24) $$ (T 23) $$ (T 22) $$ (T 21) $$ (T 20) $$ (T 19) $$ (T 18)
 $$ (T 17) $$ (T 16) $$ (T 15) $$ (T 14) $$ (T 13) $$ (T 12) $$ (T 11)
 $$ (T 10) $$ (T 9) $$ (T 8) $$ (T 7) $$ (T 6) $$ (T 5) $$ (T 4) $$ 
(T 0)end
structure Actions =
struct 
exception mlyAction of int
local open Header in
val actions = 
fn (i392,defaultPos,stack,
    (()):arg) =>
case (i392,stack)
of  ( 0, ( ( _, ( MlyValue.exp exp1, exp1left, exp1right)) :: rest671)
) => let val  result = MlyValue.program (fn _ => let val  (exp as exp1
) = exp1 ()
 in (exp)
end)
 in ( LrTable.NT 1, ( result, exp1left, exp1right), rest671)
end
|  ( 1, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( _, LPAREN1left, _)) ::
 rest671)) => let val  result = MlyValue.exp (fn _ => (A.SeqExp([])))
 in ( LrTable.NT 0, ( result, LPAREN1left, RPAREN1right), rest671)
end
|  ( 2, ( ( _, ( _, _, END1right)) :: ( _, ( MlyValue.exps exps1, _, _
)) :: _ :: ( _, ( MlyValue.decs decs1, _, _)) :: ( _, ( _, (LETleft
 as LET1left), _)) :: rest671)) => let val  result = MlyValue.exp (fn
 _ => let val  (decs as decs1) = decs1 ()
 val  (exps as exps1) = exps1 ()
 in (
A.LetExp{decs=decs,
                                      body=A.SeqExp(exps),
                                      pos=LETleft}
)
end)
 in ( LrTable.NT 0, ( result, LET1left, END1right), rest671)
end
|  ( 3, ( ( _, ( _, _, END1right)) :: _ :: ( _, ( MlyValue.decs decs1,
 _, _)) :: ( _, ( _, (LETleft as LET1left), _)) :: rest671)) => let
 val  result = MlyValue.exp (fn _ => let val  (decs as decs1) = decs1
 ()
 in (A.LetExp{decs=decs, body=A.SeqExp([]), pos=LETleft})
end)
 in ( LrTable.NT 0, ( result, LET1left, END1right), rest671)
end
|  ( 4, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.exps exps1, _
, _)) :: ( _, ( _, LPAREN1left, _)) :: rest671)) => let val  result = 
MlyValue.exp (fn _ => let val  (exps as exps1) = exps1 ()
 in (A.SeqExp(exps))
end)
 in ( LrTable.NT 0, ( result, LPAREN1left, RPAREN1right), rest671)
end
|  ( 5, ( ( _, ( MlyValue.arith arith1, arith1left, arith1right)) :: 
rest671)) => let val  result = MlyValue.exp (fn _ => let val  (arith
 as arith1) = arith1 ()
 in (arith)
end)
 in ( LrTable.NT 0, ( result, arith1left, arith1right), rest671)
end
|  ( 6, ( ( _, ( MlyValue.comp comp1, comp1left, comp1right)) :: 
rest671)) => let val  result = MlyValue.exp (fn _ => let val  (comp
 as comp1) = comp1 ()
 in (comp)
end)
 in ( LrTable.NT 0, ( result, comp1left, comp1right), rest671)
end
|  ( 7, ( ( _, ( MlyValue.bool bool1, bool1left, bool1right)) :: 
rest671)) => let val  result = MlyValue.exp (fn _ => let val  (bool
 as bool1) = bool1 ()
 in (bool)
end)
 in ( LrTable.NT 0, ( result, bool1left, bool1right), rest671)
end
|  ( 8, ( ( _, ( MlyValue.record record1, record1left, record1right))
 :: rest671)) => let val  result = MlyValue.exp (fn _ => let val  (
record as record1) = record1 ()
 in (record)
end)
 in ( LrTable.NT 0, ( result, record1left, record1right), rest671)
end
|  ( 9, ( ( _, ( MlyValue.lvalue lvalue1, lvalue1left, lvalue1right))
 :: rest671)) => let val  result = MlyValue.exp (fn _ => let val  (
lvalue as lvalue1) = lvalue1 ()
 in (A.VarExp(lvalue))
end)
 in ( LrTable.NT 0, ( result, lvalue1left, lvalue1right), rest671)
end
|  ( 10, ( ( _, ( MlyValue.arrayseq arrayseq1, arrayseq1left, 
arrayseq1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (arrayseq as arrayseq1) = arrayseq1 ()
 in (arrayseq)
end)
 in ( LrTable.NT 0, ( result, arrayseq1left, arrayseq1right), rest671)

end
|  ( 11, ( ( _, ( MlyValue.funcall funcall1, funcall1left, 
funcall1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (funcall as funcall1) = funcall1 ()
 in (funcall)
end)
 in ( LrTable.NT 0, ( result, funcall1left, funcall1right), rest671)

end
|  ( 12, ( ( _, ( MlyValue.forseq forseq1, forseq1left, forseq1right))
 :: rest671)) => let val  result = MlyValue.exp (fn _ => let val  (
forseq as forseq1) = forseq1 ()
 in (forseq)
end)
 in ( LrTable.NT 0, ( result, forseq1left, forseq1right), rest671)
end
|  ( 13, ( ( _, ( MlyValue.whileseq whileseq1, whileseq1left, 
whileseq1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (whileseq as whileseq1) = whileseq1 ()
 in (whileseq)
end)
 in ( LrTable.NT 0, ( result, whileseq1left, whileseq1right), rest671)

end
|  ( 14, ( ( _, ( MlyValue.assignseq assignseq1, assignseq1left, 
assignseq1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (assignseq as assignseq1) = assignseq1 ()
 in (assignseq)
end)
 in ( LrTable.NT 0, ( result, assignseq1left, assignseq1right), 
rest671)
end
|  ( 15, ( ( _, ( MlyValue.ifseq ifseq1, ifseq1left, ifseq1right)) :: 
rest671)) => let val  result = MlyValue.exp (fn _ => let val  (ifseq
 as ifseq1) = ifseq1 ()
 in (ifseq)
end)
 in ( LrTable.NT 0, ( result, ifseq1left, ifseq1right), rest671)
end
|  ( 16, ( ( _, ( _, NIL1left, NIL1right)) :: rest671)) => let val  
result = MlyValue.exp (fn _ => (A.NilExp))
 in ( LrTable.NT 0, ( result, NIL1left, NIL1right), rest671)
end
|  ( 17, ( ( _, ( MlyValue.INT INT1, INT1left, INT1right)) :: rest671)
) => let val  result = MlyValue.exp (fn _ => let val  (INT as INT1) = 
INT1 ()
 in (A.IntExp(INT))
end)
 in ( LrTable.NT 0, ( result, INT1left, INT1right), rest671)
end
|  ( 18, ( ( _, ( MlyValue.STRING STRING1, (STRINGleft as STRING1left)
, STRING1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (STRING as STRING1) = STRING1 ()
 in (A.StringExp(STRING, STRINGleft))
end)
 in ( LrTable.NT 0, ( result, STRING1left, STRING1right), rest671)
end
|  ( 19, ( ( _, ( _, (BREAKleft as BREAK1left), BREAK1right)) :: 
rest671)) => let val  result = MlyValue.exp (fn _ => (
A.BreakExp(BREAKleft)))
 in ( LrTable.NT 0, ( result, BREAK1left, BREAK1right), rest671)
end
|  ( 20, ( ( _, ( MlyValue.exp exp1, (expleft as exp1left), exp1right)
) :: rest671)) => let val  result = MlyValue.exps (fn _ => let val  (
exp as exp1) = exp1 ()
 in ((exp, expleft)::[])
end)
 in ( LrTable.NT 30, ( result, exp1left, exp1right), rest671)
end
|  ( 21, ( ( _, ( MlyValue.exp exp1, expleft, exp1right)) :: _ :: ( _,
 ( MlyValue.exps exps1, exps1left, _)) :: rest671)) => let val  result
 = MlyValue.exps (fn _ => let val  (exps as exps1) = exps1 ()
 val  (exp as exp1) = exp1 ()
 in (exps @  ((exp, expleft)::[]))
end)
 in ( LrTable.NT 30, ( result, exps1left, exp1right), rest671)
end
|  ( 22, ( ( _, ( _, _, RBRACE1right)) :: _ :: ( _, ( MlyValue.ID ID1,
 (IDleft as ID1left), _)) :: rest671)) => let val  result = 
MlyValue.record (fn _ => let val  (ID as ID1) = ID1 ()
 in (A.RecordExp{fields=[], typ=sym(ID), pos=IDleft})
end)
 in ( LrTable.NT 31, ( result, ID1left, RBRACE1right), rest671)
end
|  ( 23, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.recordL 
recordL1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, (IDleft as ID1left),
 _)) :: rest671)) => let val  result = MlyValue.record (fn _ => let
 val  (ID as ID1) = ID1 ()
 val  (recordL as recordL1) = recordL1 ()
 in (
A.RecordExp{fields=recordL,
                                              typ=sym(ID),
                                              pos=IDleft}
)
end)
 in ( LrTable.NT 31, ( result, ID1left, RBRACE1right), rest671)
end
|  ( 24, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID1, (IDleft as ID1left), _)) :: rest671)) => let val  
result = MlyValue.recordL (fn _ => let val  (ID as ID1) = ID1 ()
 val  (exp as exp1) = exp1 ()
 in ((sym(ID), exp, IDleft)::[])
end)
 in ( LrTable.NT 32, ( result, ID1left, exp1right), rest671)
end
|  ( 25, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID1, IDleft, _)) :: _ :: ( _, ( MlyValue.recordL recordL1,
 recordL1left, _)) :: rest671)) => let val  result = MlyValue.recordL
 (fn _ => let val  (recordL as recordL1) = recordL1 ()
 val  (ID as ID1) = ID1 ()
 val  (exp as exp1) = exp1 ()
 in (recordL @ ((sym(ID), exp, IDleft)::[]))
end)
 in ( LrTable.NT 32, ( result, recordL1left, exp1right), rest671)
end
|  ( 26, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.arith (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp{left=exp1, oper=A.PlusOp, right=exp2, pos=exp1left})
end)
 in ( LrTable.NT 2, ( result, exp1left, exp2right), rest671)
end
|  ( 27, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.arith (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp{left=exp1, oper=A.MinusOp, right=exp2, pos=exp1left})
end
)
 in ( LrTable.NT 2, ( result, exp1left, exp2right), rest671)
end
|  ( 28, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.arith (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp{left=exp1, oper=A.TimesOp, right=exp2, pos=exp1left})
end
)
 in ( LrTable.NT 2, ( result, exp1left, exp2right), rest671)
end
|  ( 29, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.arith (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp{left=exp1, oper=A.DivideOp, right=exp2, pos=exp1left})

end)
 in ( LrTable.NT 2, ( result, exp1left, exp2right), rest671)
end
|  ( 30, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: ( _, ( _, (
MINUSleft as MINUS1left), _)) :: rest671)) => let val  result = 
MlyValue.arith (fn _ => let val  (exp as exp1) = exp1 ()
 in (
A.OpExp{left=A.IntExp(0), oper=A.MinusOp, right=exp, pos=MINUSleft})

end)
 in ( LrTable.NT 2, ( result, MINUS1left, exp1right), rest671)
end
|  ( 31, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.comp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp{left=exp1, oper=A.EqOp, right=exp2, pos=exp1left})
end)
 in ( LrTable.NT 3, ( result, exp1left, exp2right), rest671)
end
|  ( 32, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.comp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp{left=exp1, oper=A.NeqOp, right=exp2, pos=exp1left})
end)
 in ( LrTable.NT 3, ( result, exp1left, exp2right), rest671)
end
|  ( 33, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.comp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp{left=exp1, oper=A.GtOp, right=exp2, pos=exp1left})
end)
 in ( LrTable.NT 3, ( result, exp1left, exp2right), rest671)
end
|  ( 34, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.comp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp{left=exp1, oper=A.LtOp, right=exp2, pos=exp1left})
end)
 in ( LrTable.NT 3, ( result, exp1left, exp2right), rest671)
end
|  ( 35, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.comp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp{left=exp1, oper=A.GeOp, right=exp2, pos=exp1left})
end)
 in ( LrTable.NT 3, ( result, exp1left, exp2right), rest671)
end
|  ( 36, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.comp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp{left=exp1, oper=A.LeOp, right=exp2, pos=exp1left})
end)
 in ( LrTable.NT 3, ( result, exp1left, exp2right), rest671)
end
|  ( 37, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.bool (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (
A.IfExp{test=exp1, then'=exp2, else'=SOME(A.IntExp(0)), pos=exp1left})

end)
 in ( LrTable.NT 6, ( result, exp1left, exp2right), rest671)
end
|  ( 38, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.bool (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (
A.IfExp{test=exp1, then'=A.IntExp(1), else'=SOME(exp2), pos=exp1left})

end)
 in ( LrTable.NT 6, ( result, exp1left, exp2right), rest671)
end
|  ( 39, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: _ :: ( _, 
( MlyValue.exp exp1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, (IDleft
 as ID1left), _)) :: rest671)) => let val  result = MlyValue.arrayseq
 (fn _ => let val  (ID as ID1) = ID1 ()
 val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (
A.ArrayExp{typ=sym(ID),
                                                  size=exp1,
                                                  init=exp2,
                                                  pos=IDleft}
)
end)
 in ( LrTable.NT 4, ( result, ID1left, exp2right), rest671)
end
|  ( 40, ( ( _, ( _, _, RPAREN1right)) :: _ :: ( _, ( MlyValue.ID ID1,
 (IDleft as ID1left), _)) :: rest671)) => let val  result = 
MlyValue.funcall (fn _ => let val  (ID as ID1) = ID1 ()
 in (A.AppExp{func=sym(ID), args=[], pos=IDleft})
end)
 in ( LrTable.NT 13, ( result, ID1left, RPAREN1right), rest671)
end
|  ( 41, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.expList 
expList1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, (IDleft as ID1left),
 _)) :: rest671)) => let val  result = MlyValue.funcall (fn _ => let
 val  (ID as ID1) = ID1 ()
 val  (expList as expList1) = expList1 ()
 in (A.AppExp{func=sym(ID), args=expList, pos=IDleft})
end)
 in ( LrTable.NT 13, ( result, ID1left, RPAREN1right), rest671)
end
|  ( 42, ( ( _, ( MlyValue.exp exp1, exp1left, exp1right)) :: rest671)
) => let val  result = MlyValue.expList (fn _ => let val  (exp as exp1
) = exp1 ()
 in ((exp)::[])
end)
 in ( LrTable.NT 14, ( result, exp1left, exp1right), rest671)
end
|  ( 43, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.expList expList1, expList1left, _)) :: rest671)) => let val  
result = MlyValue.expList (fn _ => let val  (expList as expList1) = 
expList1 ()
 val  (exp as exp1) = exp1 ()
 in (expList @ (exp)::[])
end)
 in ( LrTable.NT 14, ( result, expList1left, exp1right), rest671)
end
|  ( 44, ( ( _, ( MlyValue.exp exp3, _, exp3right)) :: _ :: ( _, ( 
MlyValue.exp exp2, _, _)) :: _ :: ( _, ( MlyValue.exp exp1, _, _)) ::
 _ :: ( _, ( MlyValue.ID ID1, _, _)) :: ( _, ( _, (FORleft as FOR1left
), _)) :: rest671)) => let val  result = MlyValue.forseq (fn _ => let
 val  (ID as ID1) = ID1 ()
 val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 val  exp3 = exp3 ()
 in (
A.ForExp{var={name=sym(ID), escape=ref true},
                                                  lo=exp1,
                                                  hi=exp2,
                                                  body=exp3, pos=FORleft}
)
end)
 in ( LrTable.NT 33, ( result, FOR1left, exp3right), rest671)
end
|  ( 45, ( ( _, ( MlyValue.decs_without_tydecs decs_without_tydecs1, _
, decs_without_tydecs1right)) :: ( _, ( MlyValue.tydecs tydecs1, 
tydecs1left, _)) :: rest671)) => let val  result = MlyValue.decs (fn _
 => let val  (tydecs as tydecs1) = tydecs1 ()
 val  (decs_without_tydecs as decs_without_tydecs1) = 
decs_without_tydecs1 ()
 in (tydecs::decs_without_tydecs)
end)
 in ( LrTable.NT 15, ( result, tydecs1left, decs_without_tydecs1right)
, rest671)
end
|  ( 46, ( ( _, ( MlyValue.decs decs1, _, decs1right)) :: ( _, ( 
MlyValue.vardec vardec1, vardec1left, _)) :: rest671)) => let val  
result = MlyValue.decs (fn _ => let val  (vardec as vardec1) = vardec1
 ()
 val  (decs as decs1) = decs1 ()
 in (vardec::decs)
end)
 in ( LrTable.NT 15, ( result, vardec1left, decs1right), rest671)
end
|  ( 47, ( ( _, ( MlyValue.decs_without_fundecs decs_without_fundecs1,
 _, decs_without_fundecs1right)) :: ( _, ( MlyValue.fundecs fundecs1, 
fundecs1left, _)) :: rest671)) => let val  result = MlyValue.decs (fn
 _ => let val  (fundecs as fundecs1) = fundecs1 ()
 val  (decs_without_fundecs as decs_without_fundecs1) = 
decs_without_fundecs1 ()
 in (fundecs::decs_without_fundecs)
end)
 in ( LrTable.NT 15, ( result, fundecs1left, 
decs_without_fundecs1right), rest671)
end
|  ( 48, ( rest671)) => let val  result = MlyValue.decs (fn _ => ([]))
 in ( LrTable.NT 15, ( result, defaultPos, defaultPos), rest671)
end
|  ( 49, ( ( _, ( MlyValue.decs decs1, _, decs1right)) :: ( _, ( 
MlyValue.vardec vardec1, vardec1left, _)) :: rest671)) => let val  
result = MlyValue.decs_without_tydecs (fn _ => let val  (vardec as 
vardec1) = vardec1 ()
 val  (decs as decs1) = decs1 ()
 in (vardec::decs)
end)
 in ( LrTable.NT 25, ( result, vardec1left, decs1right), rest671)
end
|  ( 50, ( ( _, ( MlyValue.decs_without_fundecs decs_without_fundecs1,
 _, decs_without_fundecs1right)) :: ( _, ( MlyValue.fundecs fundecs1, 
fundecs1left, _)) :: rest671)) => let val  result = 
MlyValue.decs_without_tydecs (fn _ => let val  (fundecs as fundecs1) =
 fundecs1 ()
 val  (decs_without_fundecs as decs_without_fundecs1) = 
decs_without_fundecs1 ()
 in (fundecs::decs_without_fundecs)
end)
 in ( LrTable.NT 25, ( result, fundecs1left, 
decs_without_fundecs1right), rest671)
end
|  ( 51, ( rest671)) => let val  result = MlyValue.decs_without_tydecs
 (fn _ => ([]))
 in ( LrTable.NT 25, ( result, defaultPos, defaultPos), rest671)
end
|  ( 52, ( ( _, ( MlyValue.decs decs1, _, decs1right)) :: ( _, ( 
MlyValue.vardec vardec1, vardec1left, _)) :: rest671)) => let val  
result = MlyValue.decs_without_fundecs (fn _ => let val  (vardec as 
vardec1) = vardec1 ()
 val  (decs as decs1) = decs1 ()
 in (vardec::decs)
end)
 in ( LrTable.NT 26, ( result, vardec1left, decs1right), rest671)
end
|  ( 53, ( ( _, ( MlyValue.decs_without_tydecs decs_without_tydecs1, _
, decs_without_tydecs1right)) :: ( _, ( MlyValue.tydecs tydecs1, 
tydecs1left, _)) :: rest671)) => let val  result = 
MlyValue.decs_without_fundecs (fn _ => let val  (tydecs as tydecs1) = 
tydecs1 ()
 val  (decs_without_tydecs as decs_without_tydecs1) = 
decs_without_tydecs1 ()
 in (tydecs::decs_without_tydecs)
end)
 in ( LrTable.NT 26, ( result, tydecs1left, decs_without_tydecs1right)
, rest671)
end
|  ( 54, ( rest671)) => let val  result = 
MlyValue.decs_without_fundecs (fn _ => ([]))
 in ( LrTable.NT 26, ( result, defaultPos, defaultPos), rest671)
end
|  ( 55, ( ( _, ( MlyValue.fundecs_rest fundecs_rest1, _, 
fundecs_rest1right)) :: ( _, ( MlyValue.fundec fundec1, fundec1left, _
)) :: rest671)) => let val  result = MlyValue.fundecs (fn _ => let
 val  (fundec as fundec1) = fundec1 ()
 val  (fundecs_rest as fundecs_rest1) = fundecs_rest1 ()
 in (A.FunctionDec(fundec::fundecs_rest))
end)
 in ( LrTable.NT 18, ( result, fundec1left, fundecs_rest1right), 
rest671)
end
|  ( 56, ( ( _, ( MlyValue.fundecs_rest fundecs_rest1, _, 
fundecs_rest1right)) :: ( _, ( MlyValue.fundec fundec1, fundec1left, _
)) :: rest671)) => let val  result = MlyValue.fundecs_rest (fn _ =>
 let val  (fundec as fundec1) = fundec1 ()
 val  (fundecs_rest as fundecs_rest1) = fundecs_rest1 ()
 in (fundec::fundecs_rest)
end)
 in ( LrTable.NT 27, ( result, fundec1left, fundecs_rest1right), 
rest671)
end
|  ( 57, ( rest671)) => let val  result = MlyValue.fundecs_rest (fn _
 => ([]))
 in ( LrTable.NT 27, ( result, defaultPos, defaultPos), rest671)
end
|  ( 58, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: _ :: ( _, 
( MlyValue.formals formals1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, _,
 _)) :: ( _, ( _, (FUNCTIONleft as FUNCTION1left), _)) :: rest671)) =>
 let val  result = MlyValue.fundec (fn _ => let val  (ID as ID1) = ID1
 ()
 val  (formals as formals1) = formals1 ()
 val  (exp as exp1) = exp1 ()
 in (
{name=sym(ID),
                                                   params=formals,
                                                   result=NONE,
                                                   body=exp,
                                                   pos=FUNCTIONleft}
)
end)
 in ( LrTable.NT 17, ( result, FUNCTION1left, exp1right), rest671)
end
|  ( 59, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID2, ID2left, _)) :: _ :: _ :: ( _, ( MlyValue.formals 
formals1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, _, _)) :: ( _, ( _, (
FUNCTIONleft as FUNCTION1left), _)) :: rest671)) => let val  result = 
MlyValue.fundec (fn _ => let val  ID1 = ID1 ()
 val  (formals as formals1) = formals1 ()
 val  ID2 = ID2 ()
 val  (exp as exp1) = exp1 ()
 in (
{name=sym(ID1),
                                                          params=formals,
                                                          result=SOME(sym(ID2),ID2left),
                                                          body=exp,
                                                          pos=FUNCTIONleft}
)
end)
 in ( LrTable.NT 17, ( result, FUNCTION1left, exp1right), rest671)
end
|  ( 60, ( rest671)) => let val  result = MlyValue.formals (fn _ => (
[]))
 in ( LrTable.NT 28, ( result, defaultPos, defaultPos), rest671)
end
|  ( 61, ( ( _, ( MlyValue.formals_rest formals_rest1, _, 
formals_rest1right)) :: ( _, ( MlyValue.ID ID2, _, _)) :: _ :: ( _, ( 
MlyValue.ID ID1, ID1left, _)) :: rest671)) => let val  result = 
MlyValue.formals (fn _ => let val  ID1 = ID1 ()
 val  ID2 = ID2 ()
 val  (formals_rest as formals_rest1) = formals_rest1 ()
 in (
({var={name=sym(ID1),
                                  escape=ref true},
                                  typ=sym(ID2),
                                  pos=ID1left})::formals_rest
)
end)
 in ( LrTable.NT 28, ( result, ID1left, formals_rest1right), rest671)

end
|  ( 62, ( rest671)) => let val  result = MlyValue.formals_rest (fn _
 => ([]))
 in ( LrTable.NT 29, ( result, defaultPos, defaultPos), rest671)
end
|  ( 63, ( ( _, ( MlyValue.formals_rest formals_rest1, _, 
formals_rest1right)) :: ( _, ( MlyValue.ID ID2, _, _)) :: _ :: ( _, ( 
MlyValue.ID ID1, ID1left, _)) :: ( _, ( _, COMMA1left, _)) :: rest671)
) => let val  result = MlyValue.formals_rest (fn _ => let val  ID1 = 
ID1 ()
 val  ID2 = ID2 ()
 val  (formals_rest as formals_rest1) = formals_rest1 ()
 in (
({var={name=sym(ID1),
                                        escape=ref true},
                                        typ=sym(ID2),
                                        pos=ID1left})::formals_rest
)
end)
 in ( LrTable.NT 29, ( result, COMMA1left, formals_rest1right), 
rest671)
end
|  ( 64, ( ( _, ( MlyValue.tydecs_rest tydecs_rest1, _, 
tydecs_rest1right)) :: ( _, ( MlyValue.tydec tydec1, tydec1left, _))
 :: rest671)) => let val  result = MlyValue.tydecs (fn _ => let val  (
tydec as tydec1) = tydec1 ()
 val  (tydecs_rest as tydecs_rest1) = tydecs_rest1 ()
 in (A.TypeDec(tydec::tydecs_rest))
end)
 in ( LrTable.NT 23, ( result, tydec1left, tydecs_rest1right), rest671
)
end
|  ( 65, ( ( _, ( MlyValue.tydecs_rest tydecs_rest1, _, 
tydecs_rest1right)) :: ( _, ( MlyValue.tydec tydec1, tydec1left, _))
 :: rest671)) => let val  result = MlyValue.tydecs_rest (fn _ => let
 val  (tydec as tydec1) = tydec1 ()
 val  (tydecs_rest as tydecs_rest1) = tydecs_rest1 ()
 in (tydec::tydecs_rest)
end)
 in ( LrTable.NT 24, ( result, tydec1left, tydecs_rest1right), rest671
)
end
|  ( 66, ( rest671)) => let val  result = MlyValue.tydecs_rest (fn _
 => ([]))
 in ( LrTable.NT 24, ( result, defaultPos, defaultPos), rest671)
end
|  ( 67, ( ( _, ( MlyValue.ty ty1, _, ty1right)) :: _ :: ( _, ( 
MlyValue.ID ID1, _, _)) :: ( _, ( _, (TYPEleft as TYPE1left), _)) :: 
rest671)) => let val  result = MlyValue.tydec (fn _ => let val  (ID
 as ID1) = ID1 ()
 val  (ty as ty1) = ty1 ()
 in ({name=sym(ID), ty=ty, pos=TYPEleft})
end)
 in ( LrTable.NT 22, ( result, TYPE1left, ty1right), rest671)
end
|  ( 68, ( ( _, ( MlyValue.ID ID1, (IDleft as ID1left), ID1right)) :: 
rest671)) => let val  result = MlyValue.ty (fn _ => let val  (ID as 
ID1) = ID1 ()
 in (A.NameTy(sym(ID), IDleft))
end)
 in ( LrTable.NT 19, ( result, ID1left, ID1right), rest671)
end
|  ( 69, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.tyfields 
tyfields1, _, _)) :: ( _, ( _, LBRACE1left, _)) :: rest671)) => let
 val  result = MlyValue.ty (fn _ => let val  (tyfields as tyfields1) =
 tyfields1 ()
 in (A.RecordTy(tyfields))
end)
 in ( LrTable.NT 19, ( result, LBRACE1left, RBRACE1right), rest671)

end
|  ( 70, ( ( _, ( MlyValue.ID ID1, IDleft, ID1right)) :: _ :: ( _, ( _
, ARRAY1left, _)) :: rest671)) => let val  result = MlyValue.ty (fn _
 => let val  (ID as ID1) = ID1 ()
 in (A.ArrayTy(sym(ID), IDleft))
end)
 in ( LrTable.NT 19, ( result, ARRAY1left, ID1right), rest671)
end
|  ( 71, ( ( _, ( MlyValue.tyfields_rest tyfields_rest1, _, 
tyfields_rest1right)) :: ( _, ( MlyValue.ID ID2, _, _)) :: _ :: ( _, (
 MlyValue.ID ID1, ID1left, _)) :: rest671)) => let val  result = 
MlyValue.tyfields (fn _ => let val  ID1 = ID1 ()
 val  ID2 = ID2 ()
 val  (tyfields_rest as tyfields_rest1) = tyfields_rest1 ()
 in (
({name=sym(ID1),
                                       typ=sym(ID2),
                                       pos=ID1left})::tyfields_rest
)
end)
 in ( LrTable.NT 20, ( result, ID1left, tyfields_rest1right), rest671)

end
|  ( 72, ( rest671)) => let val  result = MlyValue.tyfields (fn _ => (
[]))
 in ( LrTable.NT 20, ( result, defaultPos, defaultPos), rest671)
end
|  ( 73, ( ( _, ( MlyValue.tyfields_rest tyfields_rest1, _, 
tyfields_rest1right)) :: ( _, ( MlyValue.ID ID2, _, _)) :: _ :: ( _, (
 MlyValue.ID ID1, ID1left, _)) :: ( _, ( _, COMMA1left, _)) :: rest671
)) => let val  result = MlyValue.tyfields_rest (fn _ => let val  ID1 =
 ID1 ()
 val  ID2 = ID2 ()
 val  (tyfields_rest as tyfields_rest1) = tyfields_rest1 ()
 in (({name=sym(ID1), typ=sym(ID2), pos=ID1left})::tyfields_rest)
end)
 in ( LrTable.NT 21, ( result, COMMA1left, tyfields_rest1right), 
rest671)
end
|  ( 74, ( rest671)) => let val  result = MlyValue.tyfields_rest (fn _
 => ([]))
 in ( LrTable.NT 21, ( result, defaultPos, defaultPos), rest671)
end
|  ( 75, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID1, _, _)) :: ( _, ( _, (VARleft as VAR1left), _)) :: 
rest671)) => let val  result = MlyValue.vardec (fn _ => let val  (ID
 as ID1) = ID1 ()
 val  (exp as exp1) = exp1 ()
 in (
A.VarDec{var={name=sym(ID), escape=ref true}, typ=NONE, init=exp, pos=VARleft}
)
end)
 in ( LrTable.NT 16, ( result, VAR1left, exp1right), rest671)
end
|  ( 76, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID2, ID2left, _)) :: _ :: ( _, ( MlyValue.ID ID1, _, _))
 :: ( _, ( _, (VARleft as VAR1left), _)) :: rest671)) => let val  
result = MlyValue.vardec (fn _ => let val  ID1 = ID1 ()
 val  ID2 = ID2 ()
 val  (exp as exp1) = exp1 ()
 in (
A.VarDec{var={name=sym(ID1), escape=ref true}, typ=SOME(sym(ID2),ID2left), init=exp, pos=VARleft}
)
end)
 in ( LrTable.NT 16, ( result, VAR1left, exp1right), rest671)
end
|  ( 77, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, _, _)) :: ( _, ( _, (WHILEleft as WHILE1left), _))
 :: rest671)) => let val  result = MlyValue.whileseq (fn _ => let val 
 exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.WhileExp{test=exp1, body=exp2, pos=WHILEleft})
end)
 in ( LrTable.NT 5, ( result, WHILE1left, exp2right), rest671)
end
|  ( 78, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.lvalue lvalue1, (lvalueleft as lvalue1left), _)) :: rest671))
 => let val  result = MlyValue.assignseq (fn _ => let val  (lvalue as 
lvalue1) = lvalue1 ()
 val  (exp as exp1) = exp1 ()
 in (A.AssignExp{var=lvalue, exp=exp, pos=lvalueleft})
end)
 in ( LrTable.NT 11, ( result, lvalue1left, exp1right), rest671)
end
|  ( 79, ( ( _, ( MlyValue.exp exp3, _, exp3right)) :: _ :: ( _, ( 
MlyValue.exp exp2, _, _)) :: _ :: ( _, ( MlyValue.exp exp1, _, _)) :: 
( _, ( _, (IFleft as IF1left), _)) :: rest671)) => let val  result = 
MlyValue.ifseq (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 val  exp3 = exp3 ()
 in (A.IfExp{test=exp1, then'=exp2, else'=SOME(exp3), pos=IFleft})
end
)
 in ( LrTable.NT 12, ( result, IF1left, exp3right), rest671)
end
|  ( 80, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, _, _)) :: ( _, ( _, (IFleft as IF1left), _)) :: 
rest671)) => let val  result = MlyValue.ifseq (fn _ => let val  exp1 =
 exp1 ()
 val  exp2 = exp2 ()
 in (A.IfExp{test=exp1, then'=exp2, else'=NONE, pos=IFleft})
end)
 in ( LrTable.NT 12, ( result, IF1left, exp2right), rest671)
end
|  ( 81, ( ( _, ( MlyValue.ID ID1, (IDleft as ID1left), ID1right)) :: 
rest671)) => let val  result = MlyValue.lvalue (fn _ => let val  (ID
 as ID1) = ID1 ()
 in (A.SimpleVar(sym(ID), IDleft))
end)
 in ( LrTable.NT 7, ( result, ID1left, ID1right), rest671)
end
|  ( 82, ( ( _, ( MlyValue.lvalue_rest lvalue_rest1, lvalue_rest1left,
 lvalue_rest1right)) :: rest671)) => let val  result = MlyValue.lvalue
 (fn _ => let val  (lvalue_rest as lvalue_rest1) = lvalue_rest1 ()
 in (lvalue_rest)
end)
 in ( LrTable.NT 7, ( result, lvalue_rest1left, lvalue_rest1right), 
rest671)
end
|  ( 83, ( ( _, ( MlyValue.lvalue_field lvalue_field1, 
lvalue_field1left, lvalue_field1right)) :: rest671)) => let val  
result = MlyValue.lvalue_rest (fn _ => let val  (lvalue_field as 
lvalue_field1) = lvalue_field1 ()
 in (lvalue_field)
end)
 in ( LrTable.NT 8, ( result, lvalue_field1left, lvalue_field1right), 
rest671)
end
|  ( 84, ( ( _, ( MlyValue.lvalue_subscript lvalue_subscript1, 
lvalue_subscript1left, lvalue_subscript1right)) :: rest671)) => let
 val  result = MlyValue.lvalue_rest (fn _ => let val  (
lvalue_subscript as lvalue_subscript1) = lvalue_subscript1 ()
 in (lvalue_subscript)
end)
 in ( LrTable.NT 8, ( result, lvalue_subscript1left, 
lvalue_subscript1right), rest671)
end
|  ( 85, ( ( _, ( MlyValue.ID ID2, _, ID2right)) :: _ :: ( _, ( 
MlyValue.ID ID1, ID1left, _)) :: rest671)) => let val  result = 
MlyValue.lvalue_field (fn _ => let val  ID1 = ID1 ()
 val  ID2 = ID2 ()
 in (A.FieldVar(A.SimpleVar(sym(ID1), ID1left), sym(ID2), ID1left))

end)
 in ( LrTable.NT 9, ( result, ID1left, ID2right), rest671)
end
|  ( 86, ( ( _, ( MlyValue.ID ID1, IDleft, ID1right)) :: _ :: ( _, ( 
MlyValue.lvalue_rest lvalue_rest1, lvalue_rest1left, _)) :: rest671))
 => let val  result = MlyValue.lvalue_field (fn _ => let val  (
lvalue_rest as lvalue_rest1) = lvalue_rest1 ()
 val  (ID as ID1) = ID1 ()
 in (A.FieldVar(lvalue_rest, sym(ID), IDleft))
end)
 in ( LrTable.NT 9, ( result, lvalue_rest1left, ID1right), rest671)

end
|  ( 87, ( ( _, ( _, _, RBRACK1right)) :: ( _, ( MlyValue.exp exp1, _,
 _)) :: _ :: ( _, ( MlyValue.ID ID1, (IDleft as ID1left), _)) :: 
rest671)) => let val  result = MlyValue.lvalue_subscript (fn _ => let
 val  (ID as ID1) = ID1 ()
 val  (exp as exp1) = exp1 ()
 in (A.SubscriptVar(A.SimpleVar(sym(ID), IDleft), exp, IDleft))
end)
 in ( LrTable.NT 10, ( result, ID1left, RBRACK1right), rest671)
end
|  ( 88, ( ( _, ( _, _, RBRACK1right)) :: ( _, ( MlyValue.exp exp1, _,
 _)) :: _ :: ( _, ( MlyValue.lvalue_rest lvalue_rest1, (
lvalue_restleft as lvalue_rest1left), _)) :: rest671)) => let val  
result = MlyValue.lvalue_subscript (fn _ => let val  (lvalue_rest as 
lvalue_rest1) = lvalue_rest1 ()
 val  (exp as exp1) = exp1 ()
 in (A.SubscriptVar(lvalue_rest, exp, lvalue_restleft))
end)
 in ( LrTable.NT 10, ( result, lvalue_rest1left, RBRACK1right), 
rest671)
end
| _ => raise (mlyAction i392)
end
val void = MlyValue.VOID
val extract = fn a => (fn MlyValue.program x => x
| _ => let exception ParseInternal
	in raise ParseInternal end) a ()
end
end
structure Tokens : Tiger_TOKENS =
struct
type svalue = ParserData.svalue
type ('a,'b) token = ('a,'b) Token.token
fun EOF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 0,(
ParserData.MlyValue.VOID,p1,p2))
fun ID (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 1,(
ParserData.MlyValue.ID (fn () => i),p1,p2))
fun INT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 2,(
ParserData.MlyValue.INT (fn () => i),p1,p2))
fun STRING (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 3,(
ParserData.MlyValue.STRING (fn () => i),p1,p2))
fun COMMA (p1,p2) = Token.TOKEN (ParserData.LrTable.T 4,(
ParserData.MlyValue.VOID,p1,p2))
fun COLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 5,(
ParserData.MlyValue.VOID,p1,p2))
fun SEMICOLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 6,(
ParserData.MlyValue.VOID,p1,p2))
fun LPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 7,(
ParserData.MlyValue.VOID,p1,p2))
fun RPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 8,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRACK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 9,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 10,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 11,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 12,(
ParserData.MlyValue.VOID,p1,p2))
fun DOT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 13,(
ParserData.MlyValue.VOID,p1,p2))
fun PLUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 14,(
ParserData.MlyValue.VOID,p1,p2))
fun MINUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 15,(
ParserData.MlyValue.VOID,p1,p2))
fun TIMES (p1,p2) = Token.TOKEN (ParserData.LrTable.T 16,(
ParserData.MlyValue.VOID,p1,p2))
fun DIVIDE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 17,(
ParserData.MlyValue.VOID,p1,p2))
fun EQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 18,(
ParserData.MlyValue.VOID,p1,p2))
fun NEQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 19,(
ParserData.MlyValue.VOID,p1,p2))
fun LT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 20,(
ParserData.MlyValue.VOID,p1,p2))
fun LE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 21,(
ParserData.MlyValue.VOID,p1,p2))
fun GT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 22,(
ParserData.MlyValue.VOID,p1,p2))
fun GE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 23,(
ParserData.MlyValue.VOID,p1,p2))
fun UMINUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 24,(
ParserData.MlyValue.VOID,p1,p2))
fun AND (p1,p2) = Token.TOKEN (ParserData.LrTable.T 25,(
ParserData.MlyValue.VOID,p1,p2))
fun OR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 26,(
ParserData.MlyValue.VOID,p1,p2))
fun ASSIGN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 27,(
ParserData.MlyValue.VOID,p1,p2))
fun ARRAY (p1,p2) = Token.TOKEN (ParserData.LrTable.T 28,(
ParserData.MlyValue.VOID,p1,p2))
fun IF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 29,(
ParserData.MlyValue.VOID,p1,p2))
fun THEN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 30,(
ParserData.MlyValue.VOID,p1,p2))
fun ELSE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 31,(
ParserData.MlyValue.VOID,p1,p2))
fun WHILE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 32,(
ParserData.MlyValue.VOID,p1,p2))
fun FOR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 33,(
ParserData.MlyValue.VOID,p1,p2))
fun TO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 34,(
ParserData.MlyValue.VOID,p1,p2))
fun DO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 35,(
ParserData.MlyValue.VOID,p1,p2))
fun LET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 36,(
ParserData.MlyValue.VOID,p1,p2))
fun IN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 37,(
ParserData.MlyValue.VOID,p1,p2))
fun END (p1,p2) = Token.TOKEN (ParserData.LrTable.T 38,(
ParserData.MlyValue.VOID,p1,p2))
fun OF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 39,(
ParserData.MlyValue.VOID,p1,p2))
fun BREAK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 40,(
ParserData.MlyValue.VOID,p1,p2))
fun NIL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 41,(
ParserData.MlyValue.VOID,p1,p2))
fun FUNCTION (p1,p2) = Token.TOKEN (ParserData.LrTable.T 42,(
ParserData.MlyValue.VOID,p1,p2))
fun VAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 43,(
ParserData.MlyValue.VOID,p1,p2))
fun TYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 44,(
ParserData.MlyValue.VOID,p1,p2))
fun IFPREC (p1,p2) = Token.TOKEN (ParserData.LrTable.T 45,(
ParserData.MlyValue.VOID,p1,p2))
end
end
