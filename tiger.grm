(*
  Josh Isenstein
  CPSC 421 â€” Assignment 4
  February 18, 2015
*)

structure A = Absyn

fun sym(id) = Symbol.symbol(id);

%%
%term
    EOF
  | ID of string
  | INT of int | STRING of string
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK
  | LBRACE | RBRACE | DOT
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE | UMINUS
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF
  | BREAK | NIL
  | FUNCTION | VAR | TYPE | IFPREC

%nonterm  exp of A.exp | program of A.exp | arith of A.exp
        | comp of A.exp | arrayseq of A.exp | whileseq of A.exp | bool of A.exp
        | lvalue of A.var | lvalue_rest of A.var | lvalue_field of A.var
        | lvalue_subscript of A.var | assignseq of A.exp | ifseq of A.exp
        | funcall of A.exp | expList of A.exp list | decs of A.dec list
        | vardec of A.dec | fundec of A.fundec | fundecs of A.dec
        | ty of A.ty | tyfields of A.tfield list
        | tyfields_rest of A.tfield list
        | tydec of {name: A.symbol, ty: A.ty, pos: pos} | tydecs of A.dec
        | tydecs_rest of {name: A.symbol, ty: A.ty, pos: pos} list
        | decs_without_tydecs of A.dec list | decs_without_fundecs of A.dec list
        | fundecs_rest of A.fundec list | formals of A.formals list
        | formals_rest of A.formals list | exps of (A.exp * pos) list
        | record of A.exp | recordL of A.efield list | forseq of A.exp

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE
      DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%nonassoc IFPREC
%nonassoc ELSE
%nonassoc ASSIGN DO
%nonassoc OF
%left OR
%left AND
%nonassoc EQ NEQ GT GE LT LE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%%

program       : exp                           (exp)


exp:   LPAREN RPAREN (A.SeqExp([]))
   |   LET decs IN exps END (A.LetExp{decs=decs,
                                      body=A.SeqExp(exps),
                                      pos=LETleft})
   |   LET decs IN END (A.LetExp{decs=decs, body=A.SeqExp([]), pos=LETleft})
   |   LPAREN exps RPAREN (A.SeqExp(exps))
   |   arith     (arith)
   |   comp      (comp)
   |   bool      (bool)
   |   record    (record)
   |   lvalue    (A.VarExp(lvalue))
   |   arrayseq  (arrayseq)
   |   funcall   (funcall)
   |   forseq    (forseq)
   |   whileseq  (whileseq)
   |   assignseq (assignseq)
   |   ifseq     (ifseq)
   |   NIL       (A.NilExp)
   |   INT       (A.IntExp(INT))
   |   STRING    (A.StringExp(STRING, STRINGleft))
   |   BREAK     (A.BreakExp(BREAKleft))

exps: exp ((exp, expleft)::[])
   |  exps SEMICOLON exp (exps @  ((exp, expleft)::[]))

record: ID LBRACE RBRACE (A.RecordExp{fields=[], typ=sym(ID), pos=IDleft})
   |    ID LBRACE recordL RBRACE (A.RecordExp{fields=recordL,
                                              typ=sym(ID),
                                              pos=IDleft})

recordL: ID EQ exp ((sym(ID), exp, IDleft)::[])
   |    recordL COMMA ID EQ exp (recordL @ ((sym(ID), exp, IDleft)::[]))

arith:   exp PLUS exp   (A.OpExp{left=exp1, oper=A.PlusOp, right=exp2, pos=exp1left})
    |    exp MINUS exp  (A.OpExp{left=exp1, oper=A.MinusOp, right=exp2, pos=exp1left})
    |    exp TIMES exp  (A.OpExp{left=exp1, oper=A.TimesOp, right=exp2, pos=exp1left})
    |    exp DIVIDE exp (A.OpExp{left=exp1, oper=A.DivideOp, right=exp2, pos=exp1left})
    |    MINUS exp %prec UMINUS (A.OpExp{left=A.IntExp(0), oper=A.MinusOp, right=exp, pos=MINUSleft})

comp: exp EQ exp  (A.OpExp{left=exp1, oper=A.EqOp, right=exp2, pos=exp1left})
    | exp NEQ exp (A.OpExp{left=exp1, oper=A.NeqOp, right=exp2, pos=exp1left})
    | exp GT exp  (A.OpExp{left=exp1, oper=A.GtOp, right=exp2, pos=exp1left})
    | exp LT exp  (A.OpExp{left=exp1, oper=A.LtOp, right=exp2, pos=exp1left})
    | exp GE exp  (A.OpExp{left=exp1, oper=A.GeOp, right=exp2, pos=exp1left})
    | exp LE exp  (A.OpExp{left=exp1, oper=A.LeOp, right=exp2, pos=exp1left})

bool: exp AND exp (A.IfExp{test=exp1, then'=exp2, else'=SOME(A.IntExp(0)), pos=exp1left})
    | exp OR exp  (A.IfExp{test=exp1, then'=A.IntExp(1), else'=SOME(exp2), pos=exp1left})

arrayseq: ID LBRACK exp RBRACK OF exp (A.ArrayExp{typ=sym(ID),
                                                  size=exp1,
                                                  init=exp2,
                                                  pos=IDleft})

funcall: ID LPAREN RPAREN (A.AppExp{func=sym(ID), args=[], pos=IDleft})
       | ID LPAREN expList RPAREN (A.AppExp{func=sym(ID), args=expList, pos=IDleft})

expList: exp ((exp)::[])
       | expList COMMA exp (expList @ (exp)::[])

forseq: FOR ID ASSIGN exp TO exp DO exp (A.ForExp{var={name=sym(ID), escape=ref true},
                                                  lo=exp1,
                                                  hi=exp2,
                                                  body=exp3, pos=FORleft})

decs: tydecs decs_without_tydecs   (tydecs::decs_without_tydecs)
    | vardec decs                  (vardec::decs)
    | fundecs decs_without_fundecs (fundecs::decs_without_fundecs)
    | ([])

decs_without_tydecs: vardec decs (vardec::decs)
    | fundecs decs_without_fundecs (fundecs::decs_without_fundecs)
    |  ([])

decs_without_fundecs: vardec decs (vardec::decs)
    | tydecs decs_without_tydecs (tydecs::decs_without_tydecs)
    | ([])

fundecs: fundec fundecs_rest (A.FunctionDec(fundec::fundecs_rest))

fundecs_rest: fundec fundecs_rest (fundec::fundecs_rest)
    |   ([])

fundec: FUNCTION ID LPAREN formals RPAREN EQ exp ({name=sym(ID),
                                                   params=formals,
                                                   result=NONE,
                                                   body=exp,
                                                   pos=FUNCTIONleft})
    | FUNCTION ID LPAREN formals RPAREN COLON ID EQ exp ({name=sym(ID1),
                                                          params=formals,
                                                          result=SOME(sym(ID2),ID2left),
                                                          body=exp,
                                                          pos=FUNCTIONleft})

formals: ([])
   |  ID COLON ID formals_rest (({var={name=sym(ID1),
                                  escape=ref true},
                                  typ=sym(ID2),
                                  pos=ID1left})::formals_rest)

formals_rest: ([])
   |  COMMA ID COLON ID formals_rest (({var={name=sym(ID1),
                                        escape=ref true},
                                        typ=sym(ID2),
                                        pos=ID1left})::formals_rest)

tydecs: tydec tydecs_rest (A.TypeDec(tydec::tydecs_rest))

tydecs_rest: tydec tydecs_rest (tydec::tydecs_rest)
  |  ([])

tydec: TYPE ID EQ ty ({name=sym(ID), ty=ty, pos=TYPEleft})

ty: ID (A.NameTy(sym(ID), IDleft))
  | LBRACE tyfields RBRACE (A.RecordTy(tyfields))
  | ARRAY OF ID (A.ArrayTy(sym(ID), IDleft))

tyfields: ID COLON ID tyfields_rest (({name=sym(ID1),
                                       typ=sym(ID2),
                                       pos=ID1left})::tyfields_rest)
       | ([])

tyfields_rest: COMMA ID COLON ID tyfields_rest (({name=sym(ID1), typ=sym(ID2), pos=ID1left})::tyfields_rest)
     | ([])

vardec: VAR ID ASSIGN exp          (A.VarDec{var={name=sym(ID), escape=ref true}, typ=NONE, init=exp, pos=VARleft})
      | VAR ID COLON ID ASSIGN exp (A.VarDec{var={name=sym(ID1), escape=ref true}, typ=SOME(sym(ID2),ID2left), init=exp, pos=VARleft})

whileseq: WHILE exp DO exp (A.WhileExp{test=exp1, body=exp2, pos=WHILEleft})

assignseq: lvalue ASSIGN exp (A.AssignExp{var=lvalue, exp=exp, pos=lvalueleft})

ifseq: IF exp THEN exp ELSE exp     (A.IfExp{test=exp1, then'=exp2, else'=SOME(exp3), pos=IFleft})
     | IF exp THEN exp %prec IFPREC (A.IfExp{test=exp1, then'=exp2, else'=NONE, pos=IFleft})

lvalue: ID             (A.SimpleVar(sym(ID), IDleft))
      | lvalue_rest    (lvalue_rest)

lvalue_rest: lvalue_field     (lvalue_field)
           | lvalue_subscript (lvalue_subscript)

lvalue_field: ID DOT ID          (A.FieldVar(A.SimpleVar(sym(ID1), ID1left), sym(ID2), ID1left))
            | lvalue_rest DOT ID (A.FieldVar(lvalue_rest, sym(ID), IDleft))

lvalue_subscript: ID LBRACK exp RBRACK (A.SubscriptVar(A.SimpleVar(sym(ID), IDleft), exp, IDleft))
  | lvalue_rest LBRACK exp RBRACK      (A.SubscriptVar(lvalue_rest, exp, lvalue_restleft))
